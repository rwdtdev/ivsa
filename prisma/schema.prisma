generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
  output   = "../docs/models"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Organisation {
  /// Идентификатор отдела в формате cUID
  id          String       @id @default(cuid())
  /// Название организации
  name        String       @unique
  /// Описание организации
  description String
  /// Список отделов модели {Department}, входящих в организацию
  Department  Department[]
  /// Список пользователей модели {User}, входящих в организацию
  User        User[]
  /// Дата и время создания записи
  createdAt   DateTime     @default(now())
  /// Дата и время модификации записи
  updatedAt   DateTime     @updatedAt

  @@map("organisations")
}

model Department {
  /// Идентификатор отдела в формате cUID
  id             String        @id @default(cuid())
  /// Название отдела
  name           String        @unique
  /// Описание отдела
  description    String?
  /// Ссылка на организацию, в которую входит отдел в формате cUID
  organisationId String?
  /// Объект с данными об организации, в которую входит отдел
  organisation   Organisation? @relation(fields: [organisationId], references: [id])
  /// Дата и время создания записи
  createdAt      DateTime      @default(now())
  /// Дата и время модификации записи
  updatedAt      DateTime      @updatedAt
  /// Список пользователей, входящих в отдел
  users          User[]

  @@map("departments")
}

model User {
  /// Идентификатор пользователя в формате cUID
  id                     String        @id @default(cuid())
  /// ФИО
  name                   String
  /// Логин для входа в систему
  username               String        @unique
  /// Адрес электронной почты
  email                  String        @unique
  /// Номер телефона
  phone                  String
  /// Хэш пароля
  password               String
  /// Список последних 5ти захешированных паролей пользователя, разделенных ","
  passwordHashes         String[]
  /// Роль
  role                   UserRole
  /// Статус
  status                 UserStatus
  /// Дата и время создания записи
  createdAt              DateTime      @default(now())
  /// Дата и время модификации записи
  updatedAt              DateTime      @updatedAt
  /// Дата и время окончания действия аккаунта (по умполчанию - один год от даты создания)
  expiresAt              DateTime      @default(dbgenerated("NOW() + interval '1 year'"))
  /// Табельный номер
  tabelNumber            String        @unique
  /// Внешний идентификатор в системе IVA R
  ivaProfileId           String?       @unique
  /// Ссылка на организацию, в которой состоит пользователь
  organisationId         String?
  /// Токен для обновления accessToken-а в сессии пользователя
  refreshToken           String?
  /// Дата и время последней смены пароля
  lastUpdatePasswordDate DateTime      @default(now())
  /// Объект с данными об организации, в которой состоит пользователь
  organisation           Organisation? @relation(fields: [organisationId], references: [id])
  /// Ссылка на отдел, в котором состоит пользователь
  departmentId           String?
  /// Объект с данными об отделе, в котором состоит пользователь
  department             Department?   @relation(fields: [departmentId], references: [id])
  /// Список описей и событий инвентаризаций, в которых пользователь является участником
  participants           Participant[]

  @@map("users")
}

model Event {
  /// Идентификатор события в формате cUID
  id                     String         @id @default(cuid())
  /// Идентификатор распоряжения
  commandId              String
  /// Номер распоряжения
  commandNumber          String
  /// Дата распоряжения
  commandDate            DateTime
  /// Идентификатор приказа формы № ИНВ-22
  orderId                String
  /// Номер приказа формы № ИНВ-22
  orderNumber            String
  /// Дата составления приказа формы № ИНВ-22
  orderDate              DateTime
  /// Дата начала события
  startAt                DateTime
  /// Дата окончания события
  endAt                  DateTime
  /// Балансовая единица
  balanceUnit            String
  /// Код региона, в котором находится балансовая единица
  balanceUnitRegionCode  String
  /// Список участников события
  participants           Participant[]
  /// Список описей
  inventories            Inventory[]
  /// Глобальный статус события инвентаризации
  status                 EventStatus    @default(OPEN)
  /// Статус инструктужа, которые выставляется на основе
  briefingStatus         BriefingStatus @default(NOT_STARTED)
  /// Ссылка для подключения к открытой комнате видеоинструктажа
  briefingRoomInviteLink String?
  /// Идентификатор конференции в IVA-R
  briefingSessionId      String?
  /// Дата и время создания записи
  createdAt              DateTime       @default(now())
  /// Дата и время модификации записи
  updatedAt              DateTime       @updatedAt

  @@map("events")
}

model Participant {
  id          String     @id @default(cuid())
  /// Идентификатор события
  eventId     String
  /// Объект с данными о событии, с которым связана опись
  event       Event      @relation(fields: [eventId], references: [id])
  /// Идентификатор описи
  inventoryId String?
  /// Объект с данными об описи
  inventory   Inventory? @relation(fields: [inventoryId], references: [id])
  /// Идентификатор пользователя в виде табельного номера
  tabelNumber String
  /// Имя участника имя пользователя
  name        String?
  /// Объект с данными о пользователе
  user        User?      @relation(fields: [userId], references: [id])
  /// Идентификатор пользователя
  userId      String?
  /// Роль участника
  role        UserRole

  @@unique([eventId, inventoryId, tabelNumber])
  @@map("participants")
}

model File {
  id                     String    @id @default(uuid())
  /// Идентификатор описи, к которой относятся файлы
  inventoryId            String
  /// Объект с данными об описи, связанной с файлом
  inventory              Inventory @relation(fields: [inventoryId], references: [id])
  /// Ссылка на видеофайл в оперативном хранилище
  operatingStorageUrl    String?
  /// Дата сохранения видеофайла в оперативнмо хранилище
  operatingStorageSaveAt DateTime?
  /// Ссылка на видеофайл в архивном хранилище
  archiveStorageUrl      String?
  /// Дата сохранения видеофайла в архивном хранилище
  archiveStorageSaveAt   DateTime?
  /// Дата и время по истечению которого необходимо перенести файл из оперативного хранилища в архивное (operatingStorageSaveAt + период хранения - конфигурируемый)
  transferAt             DateTime?
}

model Inventory {
  /// Внешний Идентификаторр описи из Soi
  id                  String            @id
  /// Идентификатор события к которому привязана опись
  eventId             String
  /// Объект с данными о событии, с которым связана опись
  event               Event             @relation(fields: [eventId], references: [id])
  /// Номер описи
  number              String
  /// Код описи
  code                String
  /// Краткое наименование описи
  shortName           String
  /// Полное наименование описи
  name                String
  /// Дата описи
  date                DateTime
  /// Идентификатор конференции в IVA-R
  auditSessionId      String?
  /// Ссылка для подключения к открытой комнате видеоинвентаризации
  auditRoomInviteLink String?
  /// Дата и время создания записи
  createdAt           DateTime          @default(now())
  /// Дата и время модификации записи
  updatedAt           DateTime          @updatedAt
  /// Список участников
  participants        Participant[]
  /// Список файлов хранящийся в оперативном хранилище или архивном хранилище 
  videoFiles          File[]
  /// Cтатус описи
  status              InventoryStatus   @default(AVAILABLE)
  /// Идентификатор комплексной описи, если текущая опись является индивидуальной, в ином случае всегда = null
  parentId            String?
  /// Список объектов описи
  objects             InventoryObject[]
  /// Признак того, что видеофайлы, связанные с описью успешно сохранены в оперативное хранилище
  isFilesSaved        Boolean           @default(false)

  @@map("inventories")
}

model InventoryObject {
  id                 String    @id @default(cuid())
  inventoryId        String
  inventory          Inventory @relation(fields: [inventoryId], references: [id])
  inventoryNumber    String?
  location           String?
  serialNumber       String?
  networkNumber      String?
  passportNumber     String?
  quantity           Int?
  state              String?
  name               String?
  unitCode           String?
  unitName           String?
  batchNumber        String?
  placement          String?
  nomenclatureNumber String?
  /// Дата и время создания записи
  createdAt          DateTime  @default(now())
  /// Дата и время модификации записи
  updatedAt          DateTime  @updatedAt
}

model Jobs {
  /// Название периодического задания
  name        String    @unique
  /// Краткое описание задания
  description String
  /// Дата последнего запуска задания
  lastStartAt DateTime?
  /// Лог ошибки в формате Json, возникшей во время выполнения задания или приводящей к его остановке
  error       Json?

  @@map("jobs")
}

enum UserStatus {
  /// Активен
  ACTIVE
  /// Заблокирован
  BLOCKED
  /// Освобожден от должности
  RECUSED
}

enum UserRole {
  /// Администратор
  ADMIN
  /// Пользователь
  USER
  /// Председатель
  CHAIRMAN
  /// Участник комиссии
  PARTICIPANT
  /// Материально-ответственное лицо
  FINANCIALLY_RESPONSIBLE_PERSON
  /// Бухгалтер
  ACCOUNTANT
  /// Проверяющий
  INSPECTOR
  /// Руководитель
  MANAGER
  /// Акцепт-бухгалтер
  ACCOUNTANT_ACCEPTOR
  /// Оператор-технолог
  ENGINEER
}

enum InventoryStatus {
  /// Опись доступна
  AVAILABLE
  /// Опись удалена
  REMOVED
}

enum EventStatus {
  /// Событие открыто
  OPEN
  /// Событие закрыто
  CLOSED
  /// Событие удалено
  REMOVED
}

enum BriefingStatus {
  /// Инструктаж не начат
  NOT_STARTED
  /// Инструктаж в процессе
  IN_PROGRESS
  /// Инструктаж пройден
  PASSED
}

enum ConferenseRole {
  SPEAKER
  MODERATOR
  ATTENDEE
}

model SubSystems {
  id          String @id @default(cuid())
  name        String @unique
  description String

  @@map("subsystems")
}

model OperationRecord {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now()) @map("created_at")
  userId      String   @map("user_id")
  subsystemId String   @map("subsystem_id")
  payload     Json

  @@map("operations_records")
}
